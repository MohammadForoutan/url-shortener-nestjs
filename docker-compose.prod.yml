services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: url_shortener_app_prod
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    environment:
      # Application Configuration
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - HOST=${HOST}

      # Database Configuration (using service name for Docker networking)
      - POSTGRES_DB_HOST=postgres
      - POSTGRES_DB_PORT=${POSTGRES_DB_PORT}
      - POSTGRES_DB_USERNAME=${POSTGRES_DB_USERNAME}
      - POSTGRES_DB_PASSWORD=${POSTGRES_DB_PASSWORD}
      - POSTGRES_DB_DATABASE=${POSTGRES_DB_DATABASE}
      - POSTGRES_DB_SCHEMA=${POSTGRES_DB_SCHEMA}

      # Redis Configuration (using service name for Docker networking)
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}

      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN}

      # Application URLs
      - APP_URL=${APP_URL}
      - FRONTEND_URL=${FRONTEND_URL}

      # CORS Configuration
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_MAX_AGE=${CORS_MAX_AGE}
      - CORS_METHODS=${CORS_METHODS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      - postgres
      - redis
    networks:
      - url_shortener_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/app/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:18-alpine3.22
    container_name: url_shortener_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_DB_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_DATABASE}
    ports:
      - '${POSTGRES_DB_PORT}:5432'
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - url_shortener_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: url_shortener_redis_prod
    ports:
      - '${REDIS_PORT}:6379'
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - url_shortener_network
    restart: unless-stopped

networks:
  url_shortener_network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
