name: Test

on:
  workflow_dispatch:
  # push:
  #   branches: ['master']
  # pull_request:
  #   branches: ['master']

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # Application Configuration
      APP_URL: ${{ secrets.APP_URL }}
      NODE_ENV: production
      PORT: ${{ secrets.PORT }}
      HOST: ${{ secrets.HOST }}
      LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
      # JWT Configuration
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
      JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN }}
      # Postgres Database
      POSTGRES_DB_HOST: ${{ secrets.POSTGRES_DB_HOST }}
      POSTGRES_DB_PORT: ${{ secrets.POSTGRES_DB_PORT }}
      POSTGRES_DB_USERNAME: ${{ secrets.POSTGRES_DB_USERNAME }}
      POSTGRES_DB_PASSWORD: ${{ secrets.POSTGRES_DB_PASSWORD }}
      POSTGRES_DB_DATABASE: ${{ secrets.POSTGRES_DB_DATABASE }}
      POSTGRES_DB_SCHEMA: ${{ secrets.POSTGRES_DB_SCHEMA }}
      # Redis
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      REDIS_DB: ${{ secrets.REDIS_DB }}
      # Cors
      CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}
      CORS_MAX_AGE: ${{ secrets.CORS_MAX_AGE }}
      CORS_METHODS: ${{ secrets.CORS_METHODS }}
      CORS_ALLOWED_HEADERS: ${{ secrets.CORS_ALLOWED_HEADERS }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Use e2e-specific .dockerignore for test image
        run: |
          cp .dockerignore .dockerignore.prod
          cp .dockerignore-test .dockerignore
      - name: Run e2e tests with Docker Compose
        run: |
          docker compose -f docker-compose.prod.yml -f docker-compose.e2e.yml build --no-cache test
          docker compose -f docker-compose.prod.yml -f docker-compose.e2e.yml up --abort-on-container-exit --exit-code-from test
